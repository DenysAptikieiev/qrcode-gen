import React, { useState, useEffect, useMemo } from "react";import { QrCodeItem } from "./QrCodeItem";import styles from './QrCode.module.scss';import bwipjs from "bwip-js";export const QRCodeList = ({ hashKeys, name, sizeX, sizeY, color, barcode, date }) => {    const [currentPage, setCurrentPage] = useState(1);    const [itemsPerPage] = useState(54);    const indexOfLastItem = currentPage * itemsPerPage;    const indexOfFirstItem = indexOfLastItem - itemsPerPage;    const currentItems = hashKeys.slice(indexOfFirstItem, indexOfLastItem);    const totalPages = Math.ceil(hashKeys.length / itemsPerPage);    useEffect(() => {        setCurrentPage(1);    }, [hashKeys]);    const qrCodes = useMemo(() => {        return currentItems.map((text) => {            try {                const canvas = document.createElement('canvas');                bwipjs.toCanvas(canvas, {                    bcid: 'datamatrix',                    text: text,                    scale: -1,                    includetext: true,                    textxalign: 'center',                });                return {                    canvas: canvas.toDataURL(),                    gtin: text.slice(2, 19),                    sn: text.substring(text.indexOf("215") + 3, text.indexOf(""))                };            } catch (error) {                console.error("Error generating QR code:", error);                return null;            }        });    }, [currentItems]);    const handlePagination = (pageNumber) => {        setCurrentPage(pageNumber);    };    return (        <div>            <div className={styles.flex}>                {!!qrCodes.length && qrCodes.map((qrCodeData, index) => (                    <QrCodeItem                        key={index}                        index={index}                        qrCodeData={qrCodeData}                        name={name}                        sizeX={sizeX}                        sizeY={sizeY}                        color={color}                        barcode={barcode}                        date={date}                    />                ))}            </div>            <div className={styles.pagination}>                {Array.from({ length: totalPages }, (_, i) => (                    <button                        key={i}                            onClick={() => handlePagination(i + 1)}                        className={`${styles.btn} ${currentPage === i + 1 ? styles.active : ''}`}                    >                        {i + 1}                    </button>                ))}            </div>        </div>    );};