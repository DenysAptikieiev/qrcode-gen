import React, {useState} from 'react';import * as XLSX from "xlsx";export const MissingProducts = () => {    const [file1, setFile1] = useState(null);    const [file2, setFile2] = useState(null);    const [missingProducts, setMissingProducts] = useState([]);    const readExcel = async (file) => {        const data = await file.arrayBuffer();        const workbook = XLSX.read(data);        return XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], {header: 1});    };    const extractProductNumbers = (rows) => {        return rows.reduce((acc, row) => {            const productCode = row[1]; // Second column            if (productCode && productCode.startsWith('(01)')) {                // Удаляем круглые скобки и все после '91EE'                const cleanedCode = productCode                    .replace(/[\(\)]/g, '') // Удаление круглых скобок                    .split('91EE')[0]; // Удаление всего после '91EE'                acc.add(cleanedCode);            }            return acc;        }, new Set());    };    const compareFiles = async () => {        if (!file1 || !file2) {            alert('Please upload both files.');            return;        }        const [firstData, secondData] = await Promise.all([readExcel(file1), readExcel(file2)]);        const firstProductNumbers = extractProductNumbers(firstData);        const secondProductNumbers = new Set(            secondData.slice(1).map(row => {                const code = row[3]; // Извлечение из третьего столбца                // Извлекаем до первого управляющего символа или конца строки                const cleanCode = code.split(/[\u001d]/)[0];                return cleanCode;            })        );        console.log('Второй:', secondProductNumbers)        console.log('Первый:', firstProductNumbers)        const missing = Array.from(secondProductNumbers).filter(product => {            return !firstProductNumbers.has(product)        });        setMissingProducts(missing);    };    const handleFileChange = (e, setFile) => {        setFile(e.target.files[0]);    };    return (        <div>            <h2>Upload Files</h2>            <div>                <label>                    First File:                    <input type="file" onChange={(e) => handleFileChange(e, setFile1)}/>                </label>            </div>            <div>                <label>                    Second File:                    <input type="file" onChange={(e) => handleFileChange(e, setFile2)}/>                </label>            </div>            <button type={'button'} onClick={compareFiles}>Compare Files</button>            {missingProducts.length > 0 && (                <div>                    <h2>Missing Products: {missingProducts.length}</h2>                    <ul style={{                        maxHeight: '300px',                        overflow: 'auto'                    }}>                        {missingProducts.map((product, index) => (                            <li key={index}>{product}</li>                        ))}                    </ul>                </div>            )}        </div>    )}